Sun 12 Dec 2021 09:31:26 PM PST
*** compiling this code with clang++ to create an executable called myprogram
clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
*** running clang-tidy using options from .clang-tidy
LLVM (http://llvm.org/):
  LLVM version 7.0.1
  
  Optimized build.
  Default target: x86_64-pc-linux-gnu
  Host CPU: skylake-avx512
Error while processing /home/NETID/tmoore53/github_stuff/C_Plus_Plus_Exercises/Assignment5/myprogram.
*** running myprogram
Enter the amount of nodes that the banary tree should have.
You created a binary search tree that contains 45 nodes
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 
Enter the amount of nodes that the banary tree should have.
You created a binary search tree that contains 3 nodes
1 2 3 
1 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 *** running with valgrind
==26997== Memcheck, a memory error detector
==26997== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==26997== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==26997== Command: ./myprogram
==26997== 
Enter the amount of nodes that the banary tree should have.
You created a binary search tree that contains 4 nodes
1 2 3 4 
Enter the amount of nodes that the banary tree should have.
You created a binary search tree that contains 3 nodes
1 2 3 
1 2 3 1 2 3 4 ==26997== 
==26997== HEAP SUMMARY:
==26997==     in use at exit: 200 bytes in 5 blocks
==26997==   total heap usage: 10 allocs, 5 frees, 82,200 bytes allocated
==26997== 
==26997== LEAK SUMMARY:
==26997==    definitely lost: 80 bytes in 2 blocks
==26997==    indirectly lost: 120 bytes in 3 blocks
==26997==      possibly lost: 0 bytes in 0 blocks
==26997==    still reachable: 0 bytes in 0 blocks
==26997==         suppressed: 0 bytes in 0 blocks
==26997== Rerun with --leak-check=full to see details of leaked memory
==26997== 
==26997== For counts of detected and suppressed errors, rerun with: -v
==26997== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
*** cleaning up, deleting myprogram
Sun 12 Dec 2021 09:31:41 PM PST
